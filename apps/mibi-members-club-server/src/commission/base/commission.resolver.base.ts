/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Commission } from "./Commission";
import { CommissionCountArgs } from "./CommissionCountArgs";
import { CommissionFindManyArgs } from "./CommissionFindManyArgs";
import { CommissionFindUniqueArgs } from "./CommissionFindUniqueArgs";
import { CreateCommissionArgs } from "./CreateCommissionArgs";
import { UpdateCommissionArgs } from "./UpdateCommissionArgs";
import { DeleteCommissionArgs } from "./DeleteCommissionArgs";
import { User } from "../../user/base/User";
import { CommissionService } from "../commission.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Commission)
export class CommissionResolverBase {
  constructor(
    protected readonly service: CommissionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Commission",
    action: "read",
    possession: "any",
  })
  async _commissionsMeta(
    @graphql.Args() args: CommissionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Commission])
  @nestAccessControl.UseRoles({
    resource: "Commission",
    action: "read",
    possession: "any",
  })
  async commissions(
    @graphql.Args() args: CommissionFindManyArgs
  ): Promise<Commission[]> {
    return this.service.commissions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Commission, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Commission",
    action: "read",
    possession: "own",
  })
  async commission(
    @graphql.Args() args: CommissionFindUniqueArgs
  ): Promise<Commission | null> {
    const result = await this.service.commission(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Commission)
  @nestAccessControl.UseRoles({
    resource: "Commission",
    action: "create",
    possession: "any",
  })
  async createCommission(
    @graphql.Args() args: CreateCommissionArgs
  ): Promise<Commission> {
    return await this.service.createCommission({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Commission)
  @nestAccessControl.UseRoles({
    resource: "Commission",
    action: "update",
    possession: "any",
  })
  async updateCommission(
    @graphql.Args() args: UpdateCommissionArgs
  ): Promise<Commission | null> {
    try {
      return await this.service.updateCommission({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Commission)
  @nestAccessControl.UseRoles({
    resource: "Commission",
    action: "delete",
    possession: "any",
  })
  async deleteCommission(
    @graphql.Args() args: DeleteCommissionArgs
  ): Promise<Commission | null> {
    try {
      return await this.service.deleteCommission(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Commission): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
