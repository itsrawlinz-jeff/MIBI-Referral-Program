/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Referral } from "./Referral";
import { ReferralCountArgs } from "./ReferralCountArgs";
import { ReferralFindManyArgs } from "./ReferralFindManyArgs";
import { ReferralFindUniqueArgs } from "./ReferralFindUniqueArgs";
import { CreateReferralArgs } from "./CreateReferralArgs";
import { UpdateReferralArgs } from "./UpdateReferralArgs";
import { DeleteReferralArgs } from "./DeleteReferralArgs";
import { ReferralService } from "../referral.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Referral)
export class ReferralResolverBase {
  constructor(
    protected readonly service: ReferralService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Referral",
    action: "read",
    possession: "any",
  })
  async _referralsMeta(
    @graphql.Args() args: ReferralCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Referral])
  @nestAccessControl.UseRoles({
    resource: "Referral",
    action: "read",
    possession: "any",
  })
  async referrals(
    @graphql.Args() args: ReferralFindManyArgs
  ): Promise<Referral[]> {
    return this.service.referrals(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Referral, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Referral",
    action: "read",
    possession: "own",
  })
  async referral(
    @graphql.Args() args: ReferralFindUniqueArgs
  ): Promise<Referral | null> {
    const result = await this.service.referral(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Referral)
  @nestAccessControl.UseRoles({
    resource: "Referral",
    action: "create",
    possession: "any",
  })
  async createReferral(
    @graphql.Args() args: CreateReferralArgs
  ): Promise<Referral> {
    return await this.service.createReferral({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Referral)
  @nestAccessControl.UseRoles({
    resource: "Referral",
    action: "update",
    possession: "any",
  })
  async updateReferral(
    @graphql.Args() args: UpdateReferralArgs
  ): Promise<Referral | null> {
    try {
      return await this.service.updateReferral({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Referral)
  @nestAccessControl.UseRoles({
    resource: "Referral",
    action: "delete",
    possession: "any",
  })
  async deleteReferral(
    @graphql.Args() args: DeleteReferralArgs
  ): Promise<Referral | null> {
    try {
      return await this.service.deleteReferral(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
